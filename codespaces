-- Create the e-commerce database
CREATE DATABASE ecommerce;
USE ecommerce;

-- Users Table
create table users (
	user_id int primary key auto_increment ,
    first_name varchar (50),
    last_name varchar (50),
    email varchar (50) unique,
    password_hash varchar (50),
    address text ,
    phone_number varchar(15),
    account_creation_date timestamp default current_timestamp ,
    user_role enum ('admin','customer') Not null ) ;


insert into users (first_name , last_name , email , password_hash, address , phone_number  , user_role)
values('Theerach','kumar','theerach008@gmail.com','******','*** tamil nadu', '9475588888','admin' );
INSERT INTO Users (first_name, last_name, email, password_hash, address, phone_number, user_role) VALUES
('Arun', 'Kumar', 'arun.kumar@example.com', 'hashedpassword1', '123 Street, Chennai', '9876543210', 'customer'),
('Priya', 'Sharma', 'priya.sharma@example.com', 'hashedpassword2', '456 Avenue, Mumbai', '8765432109', 'customer'),
('Raj', 'Verma', 'raj.verma@example.com', 'hashedpassword3', '789 Road, Delhi', '7654321098', 'customer'),
('Meera', 'Nair', 'meera.nair@example.com', 'hashedpassword4', '101 Lane, Hyderabad', '6543210987', 'customer'),
('Vikram', 'Singh', 'vikram.singh@example.com', 'hashedpassword5', '202 Boulevard, Kolkata', '5432109876', 'customer');

select * from users ;

-- category_id (PK), category_name, category_description
create table Categories (
	category_id int primary key auto_increment,
    category_name varchar (50) ,
    category_description text);
-- Insert Categories
INSERT INTO Categories (category_name, category_description) VALUES
('Electronics', 'Devices and gadgets'),
('Clothing', 'Apparel and accessories'),
('Home & Kitchen', 'Household items and kitchenware'),
('Books', 'Various genres of books'),
('Sports & Outdoors', 'Equipment and gear for outdoor activities');

select * from Categories ;

create table products (
	product_id int primary key auto_increment ,
    product_name varchar (50) ,
    description text ,
    price decimal(10,2) ,
    stock_quantity int ,
    category_id int ,
    image_url varchar(300),
    foreign key (category_id) references Categories(category_id) );

INSERT INTO Products (product_name, description, price, stock_quantity, category_id, image_url) VALUES
('Laptop', 'High performance laptop', 750.50, 20, 1, 'laptop.jpg'),
('Smartphone', 'Latest model smartphone', 2999.49, 50, 1, 'smartphone.jpg'),
('Headphones', 'Noise cancelling headphones', 150.75, 100, 1, 'headphones.jpg'),
('T-shirt', 'Cotton T-shirt', 20.99, 200, 2, 'tshirt.jpg'),
('Jeans', 'Denim jeans', 45.50, 150, 2, 'jeans.jpg');

select * from products ;

-- order_id (PK), user_id (FK), order_date, status (pending, shipped, delivered, cancelled), shipping_address, total_amount

CREATE TABLE Orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('pending', 'shipped', 'delivered', 'cancelled') NOT NULL,
    shipping_address TEXT,
    total_amount DECIMAL(10,2),
    FOREIGN KEY (user_id) REFERENCES Users(user_id) );

INSERT INTO Orders (user_id, status, shipping_address, total_amount) VALUES
(1, 'pending', '123 Main Street, Chennai', 1500.99),
(2, 'shipped', '456 Elm Street, Bangalore', 2999.49),
(3, 'delivered', '789 Oak Street, Delhi', 850.00),
(4, 'cancelled', '321 Pine Street, Hyderabad', 450.75),
(5, 'pending', '654 Maple Street, Kolkata', 999.99);

select * from orders ;

-- order_item_id (PK), order_id (FK), product_id (FK), quantity, price_at_time_of_order

create table order_items (
	order_item_id int primary key auto_increment ,
    order_id int ,
    product_id int ,
    quantity int ,
    price_at_time_of_order decimal(10,2) ,
    foreign key (order_id) references orders(order_id) ,
    foreign key (product_id) references products(product_id) );

INSERT INTO Order_Items (order_id, product_id, quantity, price_at_time_of_order) VALUES
(1, 1, 2, 750.50),
(2, 2, 1, 2999.49),
(3, 3, 3, 150.75),
(4, 4, 2, 20.99),
(5, 5, 1, 45.50);

select * from order_Items ;

-- payment_id (PK), order_id (FK), payment_method (credit card, PayPal, etc.), payment_status (completed, pending, failed), payment_date, amount
CREATE TABLE Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY, 
    order_id INT,
    payment_method ENUM('credit_card', 'paypal', 'bank_transfer'),
    payment_status ENUM('completed', 'pending', 'failed'),
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);
INSERT INTO Payments (order_id, payment_method, payment_status, amount) VALUES
(1, 'credit_card', 'completed', 1500.99),
(2, 'paypal', 'completed', 2999.49),
(3, 'bank_transfer', 'pending', 850.00),
(4, 'credit_card', 'failed', 450.75),
(5, 'paypal', 'completed', 999.99);

select * from payments ;

-- shipping_id (PK), order_id (FK), shipping_date, delivery_date, shipping_status (shipped, in transit, delivered), shipping_provider
CREATE TABLE Shipping (
    shipping_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    shipping_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    delivery_date TIMESTAMP,
    shipping_status ENUM('shipped', 'in transit', 'delivered'),
    shipping_provider VARCHAR(100),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

INSERT INTO Shipping (order_id, shipping_date, delivery_date, shipping_status, shipping_provider) VALUES
(1, '2025-03-18 10:00:00', NULL, 'shipped', 'FedEx'),
(2, '2025-03-17 08:30:00', '2025-03-18 15:00:00', 'delivered', 'DHL'),
(3, '2025-03-16 12:45:00', '2025-03-17 14:20:00', 'delivered', 'Blue Dart'),
(4, '2025-03-15 09:10:00', NULL, 'in transit', 'India Post'),
(5, '2025-03-14 11:00:00', '2025-03-16 16:45:00', 'delivered', 'Ecom Express');
select * from shipping;

-- Columns: cart_id (PK), user_id (FK), product_id (FK), quantity
CREATE TABLE Shopping_Cart (
    cart_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id) );
    
INSERT INTO Shopping_Cart (user_id, product_id, quantity) VALUES
(1, 1, 1),
(2, 3, 2),
(3, 5, 1),
(4, 2, 1),
(5, 4, 3);

select * from shopping_cart ;

-- Columns: inventory_id (PK), product_id (FK), quantity_in_stock, reorder_level
 create table inventory (
	inventory_id int primary key auto_increment ,
    product_id int ,
    quantity_in_stock int ,
    reorder_level int,
    foreign key (product_id) references products(product_id) );
    
-- Insert Inventory Data
INSERT INTO Inventory (product_id, quantity_in_stock, reorder_level) VALUES
(1, 20, 5), 
(2, 50, 10),
(3, 100, 15),
(4, 200, 20),
(5, 150, 25);

select * from Inventory;

-- Columns: review_id (PK), product_id (FK), user_id (FK), rating (1-5), review_text, review_date (default: current timestamp)

CREATE TABLE Reviews (
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,
    user_id INT,
    rating INT CHECK (rating BETWEEN 1 AND 5),
    review_text TEXT,
    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES Products(product_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id) );
INSERT INTO Reviews (product_id, user_id, rating, review_text) VALUES
(1, 1, 5, 'Excellent laptop, very fast and reliable.'),
(2, 2, 4, 'Great smartphone, but battery life could be better.'),
(3, 3, 3, 'Average headphones, decent sound but not great noise cancellation.'),
(4, 4, 5, 'Very comfortable T-shirt, fits perfectly.'),
(5, 5, 4, 'Good quality jeans, but slightly expensive.');

select * from Reviews ;
